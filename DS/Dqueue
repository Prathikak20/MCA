Write a c++ program to implement Input Restricted Double Ended Queue data structure using arrays and class.
#include<iostream>
#define MAX 5
using namespace std;

class DQueue
{
    int DQ[MAX];
    int front,rear;
    public:
        DQueue()
        {
            front=rear=-1;
        }
        void insertRear()
        {
            int obj;
            if(rear==MAX-1)
                cout<<"DeQueue is full!\n";
            else
            {
                cout<<"Enter the element:";
                cin>>obj;
                DQ[++rear]=obj;
                if(front==-1)
                    front=0;
            }
        }
        
        void deleteRear()
        {
            if(front==-1)
                cout<<"DeQueue is empty!\n";
            else
            {
                int obj=DQ[rear];
                if(front==rear)
                    front=rear=-1;
                else
                   rear=rear-1;
                cout<<"Deleted element:"<<obj<<"\n";
            }
        }
        
         void deleteFront()
        {
            if(front==-1)
                cout<<"DeQueue is empty!\n";
            else
            {
                int obj=DQ[front];
                if(front==rear)
                    front=rear=-1;
                else
                   front=front+1;
                cout<<"Deleted element:"<<obj<<"\n";
            }
        }
        
        void fndisplay()
        {
            int i;
            if(front==-1)
                cout<<"Queue is empty!\n";
            else
            {
                for(i=front;i<=rear;i++)
                {
                    cout<<DQ[i]<<"\t";
                }
            }
        }
};

int main()
{
    int ch;
    DQueue dq;
    cout<<"MENU\n1.Insert at the Rear\n2.Delete from the Rear\n3.Delete from the Front\n4.Display\n5.Exit\n";
    while(1)
    {
        cout<<"\nEnter your choice:";
        cin>>ch;
        switch(ch)
        {
            case 1:dq.insertRear();
                    break;
            case 2:dq.deleteRear();
                    break;
            case 3:dq.deleteFront();
                    break;
            case 4:dq.fndisplay();
                    break;
            case 5:exit(0);
        }
    }
}

OUTPUT:
MENU
1.Insert at the Rear
2.Delete from the Rear
3.Delete from the Front
4.Display
5.Exit

Enter your choice:1
Enter the element:1

Enter your choice:1
Enter the element:2

Enter your choice:1
Enter the element:3

Enter your choice:1
Enter the element:4

Enter your choice:1
Enter the element:5

Enter your choice:1
DeQueue is full!

Enter your choice:4
1       2       3       4       5
Enter your choice:2
Deleted element:5

Enter your choice:3
Deleted element:1

Enter your choice:4
2       3       4
Enter your choice:2
Deleted element:4

Enter your choice:3
Deleted element:2

Enter your choice:4
3
Enter your choice:2
Deleted element:3

Enter your choice:2
DeQueue is empty!

Enter your choice:4
Queue is empty!

Enter your choice:5
