11.Write a c++ program to implement Circular Linked List using class and structure.
#include <iostream>
using namespace std;

typedef struct cnode {
    int data;
    struct cnode *ptr;
} Node;

class Clist {
public:
    Node *fnInsertBegin(Node *head) {
        int num;
        cout << "Enter data to insert at beginning: ";
        cin >> num;

        Node *newnode = (Node *)malloc(sizeof(Node));
        newnode->data = num;

        if (head == NULL) {
            newnode->ptr = newnode; // Circular link
            head = newnode;
        } else {
            Node *temp = head;
            while (temp->ptr != head)
                temp = temp->ptr;
            newnode->ptr = head;
            temp->ptr = newnode;
            head = newnode;
        }

        return head;
    }

    Node *fnInsertEnd(Node *head) {
        int num;
        cout << "Enter the number to insert at the end: ";
        cin >> num;

        Node *newnode = (Node *)malloc(sizeof(Node));
        newnode->data = num;

        if (head == NULL) {
            newnode->ptr = newnode; // Circular link
            head = newnode;
        } else {
            Node *temp = head;
            while (temp->ptr != head)
                temp = temp->ptr;
            temp->ptr = newnode;
            newnode->ptr = head; // Circular link
        }

        return head;
    }

    Node *fnInsertpos(Node *head) {
        int num, pos;
        cout << "Enter the number: ";
        cin >> num;
        cout << "Enter the position: ";
        cin >> pos;

        Node *newnode = (Node *)malloc(sizeof(Node));
        newnode->data = num;

        if (head == NULL) {
            if (pos == 0) {
                newnode->ptr = newnode; // Circular link
                head = newnode;
            } else {
                cout << "Invalid position for empty list.\n";
                free(newnode);
            }
        } else if (pos == 0) {
            Node *temp = head;
            while (temp->ptr != head)
                temp = temp->ptr;
            newnode->ptr = head;
            temp->ptr = newnode;
            head = newnode;
        } else {
            Node *temp = head;
            int count = 0;
            while (temp->ptr != head && count < pos - 1) {
                temp = temp->ptr;
                count++;
            }
            if (count != pos - 1) {
                cout << "Position out of bounds.\n";
                free(newnode);
            } else {
                newnode->ptr = temp->ptr;
                temp->ptr = newnode;
            }
        }

        return head;
    }

    Node *fnDeleteBegin(Node *head) {
        if (head == NULL) {
            cout << "List is empty.\n";
            return head;
        }

        Node *temp = head, *last = head;

        while (last->ptr != head)
            last = last->ptr;

        if (head->ptr == head) { // Only one node
            cout << "Deleted element: " << head->data << endl;
            free(head);
            return NULL;
        } else {
            cout << "Deleted element: " << head->data << endl;
            head = head->ptr;
            last->ptr = head;
            free(temp);
        }

        return head;
    }

    Node *fnDeleteEnd(Node *head) {
        if (head == NULL) {
            cout << "List is empty.\n";
            return head;
        }

        Node *temp = head, *prev = NULL;

        while (temp->ptr != head) {
            prev = temp;
            temp = temp->ptr;
        }

        if (prev == NULL) { // Only one node
            cout << "Deleted element: " << head->data << endl;
            free(head);
            return NULL;
        } else {
            cout << "Deleted element: " << temp->data << endl;
            prev->ptr = head;
            free(temp);
        }

        return head;
    }

    Node *fnDeletepos(Node *head, int pos) {
        if (head == NULL) {
            cout << "List is empty.\n";
            return head;
        }

        if (pos == 0) {
            return fnDeleteBegin(head);
        }

        Node *temp = head, *prev = NULL;
        int count = 0;

        while (temp->ptr != head && count < pos) {
            prev = temp;
            temp = temp->ptr;
            count++;
        }

        if (count != pos) {
            cout << "Position invalid.\n";
        } else {
            cout << "Deleted element: " << temp->data << endl;
            prev->ptr = temp->ptr;
            free(temp);
        }

        return head;
    }

    void fnDisplay(Node *head) {
        if (head == NULL) {
            cout << "List is empty.\n";
            return;
        }

        Node *temp = head;
        do {
            cout << temp->data << " -> ";
            temp = temp->ptr;
        } while (temp != head);
        cout << "(back to head)\n";
    }
};

int main() {
    Clist c;
    Node *head = NULL;
    int ch, pos;
    cout << "Menu\n1. Insert begin\n2. Insert end\n3. Insert position\n4. Delete begin\n5. Delete end\n6. Delete position\n7. Display\n8. Exit\n";
    while (1) {
        cout << "Enter your choice: ";
        cin >> ch;
        switch (ch) {
            case 1:
                head = c.fnInsertBegin(head);
                break;
            case 2:
                head = c.fnInsertEnd(head);
                break;
            case 3:
                head = c.fnInsertpos(head);
                break;
            case 4:
                head = c.fnDeleteBegin(head);
                break;
            case 5:
                head = c.fnDeleteEnd(head);
                break;
            case 6:
                cout << "Enter position to delete: ";
                cin >> pos;
                head = c.fnDeletepos(head, pos);
                break;
            case 7:
                c.fnDisplay(head);
                break;
            case 8:
                exit(0);
            default:
                cout << "Invalid choice. Try again.\n";
        }
    }
}

OUTPUT:
Menu
1. Insert begin
2. Insert end
3. Insert position
4. Delete begin
5. Delete end
6. Delete position
7. Display
8. Exit
Enter your choice: 1
Enter data to insert at beginning: 1
Enter your choice: 2
Enter the number to insert at the end: 2
Enter your choice: 3
Enter the number: 1
Enter the position: 1
Enter your choice: 1
Enter data to insert at beginning: 4
Enter your choice: 2
Enter the number to insert at the end: 7
Enter your choice: 7
4 -> 1 -> 1 -> 2 -> 7 -> (back to head)
Enter your choice: 4
Deleted element: 4
Enter your choice: 5
Deleted element: 7
Enter your choice: 7
1 -> 1 -> 2 -> (back to head)
Enter your choice: 6
Enter position to delete: 2
Deleted element: 2
Enter your choice: 7
1 -> 1 -> (back to head)
Enter your choice: 1
Enter data to insert at beginning: 6
Enter your choice: 2
Enter the number to insert at the end: 8
Enter your choice: 7
6 -> 1 -> 1 -> 8 -> (back to head)
Enter your choice: 8
